
; exercise 2.40

(define (prime? n)
  (if (= n (smallest-divisor n))
      #t
      #f))
      
(define (smallest-divisor n)
  (find-divisor 2 n))
  
(define (find-divisor test-divisor n)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor (+ test-divisor 1) n))))

(define (divides? a b)
  (if (= (remainder b a) 0)
      #t
      #f))

(define (square x) (* x x))

(define (prime-sum-pairs n)
  (map make-pair-sum
    (filter prime-sum?
      (unique-pairs n))))
      
(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))
  
(define (prime-sum? pair)
  (prime? (+ (car pair) (cadr pair))))
 
(define (flatmap proc seq)
  (accumulate append '() (map proc seq)))
  
(define (unique-pairs n)
  (flatmap (lambda (x)
             (map (lambda (y)
                    (list x y))
                  (enumerate-interval 1 (- x 1))))
           (enumerate-interval 2 n)))
           
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
          
(define (enumerate-interval low high)
  (if (> low high)
    '()
    (cons low (enumerate-interval (+ low 1) high))))

