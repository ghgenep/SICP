
; exercise 2.57

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
          (if (same-variable? exp var) 1 0))
        ((sum? exp)
          (make-sum (deriv (addend exp) var)
                    (deriv (augend exp) var)))
        ((product? exp)
          (make-sum
            (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (deriv (multiplier exp) var)
                          (multiplicand exp))))
        ((exponentiation? exp)
          (make-product
            (make-product (exponent exp)
                          (make-exponentiation (base exp)
                                               (- (exponent exp) 1)))
            (deriv (base exp) var)))
        (else 
          (error "unknown type -- deriv" exp))))
          
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base x)
  (cadr x))
(define (exponent x)
  (caddr x))
  
(define (make-exponentiation b n)
  (cond ((=number? n 0) 1)
        ((=number? n 1) b)
        ((and (number? b) (number? n)) (expt b n))
        (else (list '** b n))))       
(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))
 
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
  
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        ((and (pair? a1) (pair? a2)) (list '+ (append a1 a2)))
        ((pair? a1) (list '+ (append a1 (list a2))))
        ((pair? a2) (list '+ (append (list a1) a2)))
        (else (list '+ a1 a2))))
  
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        ((and (pair? m1) (pair? m2) (list '* 
        (else (list '* m1 m2))))
  
(define (=number? exp num)
  (and (number? exp) (= exp num)))
  
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  (cond ((null? (cddr s)) 0)
        (else (append '(+) (cddr s)))))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) 
  (cadr p))
(define (multiplicand p)
  (cond ((null? (cddr p)) 1) 
        (else (append '(*) (cddr p)))))
  
  
