
; exercise 2.41

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
          
(define (enumerate-interval low high)
  (if (> low high)
    '()
    (cons low (enumerate-interval (+ low 1) high))))

(define (flatmap proc seq)
  (accumulate append '() (map proc seq)))
  
(define (tree-n n)
  (flatmap (lambda (i)
             (map (lambda (x) (cons i x))
                  (flatmap (lambda (j)
                             (map (lambda (x) (cons j x))
                                  (map (lambda (x) (cons x '()))
                                       (enumerate-interval 1 (- j 1)))))
                           (enumerate-interval 1 (- i 1)))))
           (enumerate-interval 2 n)))
           
(define (equal-s lst s)
  (filter is-sum? s lst))
  
(define (filter predicate s sequence)
  (cond ((null? sequence) '())
        ((predicate (car sequence) s)
           (cons (car sequence)
                 (filter predicate s (cdr sequence))))
        (else (filter predicate s (cdr sequence)))))
        
(define (is-sum? lst s)
  (if (= (+ (car lst) (cadr lst) (caddr lst)) s)
      #t
      #f))
      
