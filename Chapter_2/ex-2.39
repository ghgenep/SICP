
; exercise 2.39

; --- from the last exercise ---
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
          
(define fold-right accumulate)

; the function does what fold-right(accumulate) one does, except
; that it accumulates in other order
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))
; ---

; reverse() implementation with fold-right() and fold-left() funcitons
(define (reverse sequence)
  (fold-right (lambda (x y) (append y (list x))) '() sequence))  
(define (reverse-2 sequence)
  (fold-left (lambda (x y) (cons y x)) '() sequence))
  
