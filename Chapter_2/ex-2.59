
; exercise 2.59

(define (element-of-set? x lst)
  (cond ((null? '()) #f)
        ((equal? x (car lst)) #t)
        (else (element-of-set? x (cdr lst)))))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2)
          (union-set (cdr set1) set2))
        (else (cons (car set1)
                    (union-set (cdr set1) set2)))))
  
