
; exercise 2.36

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
          
; the function does what accumulate() one does, except that 3rd
; argument is a sequence of sequences; the function applies the
; accumulation procedure to all the first elements of the subsequences,
; all the second elements, third elements, and so on and returns a
; sequence of the results
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map (lambda (x) (car x)) seqs))
            (accumulate-n op init (map (lambda (x) (cdr x)) seqs)))))
            
(define s '((1 2 3) (4 5 6) (7 8 9) (10 11 12)))

