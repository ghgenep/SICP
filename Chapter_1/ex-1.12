
; exercise 1.12

; Pascal's triangle:
;     1
;    1  1
;   1  2  1
;  1  3  3  1
; 1  4  6  4  1
; .............

; the function takes x as a row and y as a column, and return element
; of the triangle; if the function takes uncorrect arguments, it will
; return 0;
(define (pascal x y)
  ; checking of arguments
  (if (and (>= x 0) (> y 0) (<= y (+ x 1)))
      (pascal-recursive x y)
      0))

; version 1: tree recursive process; rows starts from 0;
(define (pascal-recursive x y)
  (if (or (= x 1) (= y 1) (= (+ x 1) y)) 
      1
      (+ (pascal (- x 1) (- y 1))
         (pascal (- x 1) y))))
      
; version 2: tree recursive process; rows starts from 1;
; (define (pascal-recursive x y)
;   (if (or (= y 1) (= y x)) 
;       1
;       (+ (pascal-recursive (- x 1) (- y 1))
;          (pascal-recursive (- x 1) y))))

