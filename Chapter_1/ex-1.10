
; exercise 1.10

; The function raises 2 to a some power
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10)
; (A 0 (A 1 9))
;      (A 0 (A 1 8))
;           (A 0 (A 1 7))
;                (A 0 (A 1 6))
;                     (A 0 (A 1 5))
;                          (A 0 (A 1 4))
;                               (A 0 (A 1 3))
;                                    (A 0 (A 1 2))
;                                         (A 0 (A 1 1))
;                                              2
;                                         4
;                                    8
;                               16
;                          32
;                     64
;                128
;           256
;     512
; 1024 

(A 2 4)
; (A 1 (A 2 3))
;      (A 1 (A 2 3))
;           (A 1 (A 2 2))
;                (A 1 (A 2 1))
;                     2
;                (A 0 (A 1 1))
;                     2
;                4
;           (A 0 (A 1 3))
;                (A 0 (A 1 2))
;                     (A 0 (A 1 1))
;                          2
;                     4
;                8
;           16
;...
; 65536

(A 3 3)
; 65536

(define (f n) (A 0 n))
; what f function does is 2n

(define (g n) (A 1 n))
; what g function does is 2^n

(define (h n) (A 2 n))
; what h function does is 2^(2^n)

